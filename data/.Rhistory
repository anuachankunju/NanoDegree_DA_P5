ggplot(aes(x=mean_price), data=diamonds_mp_by_clarity )+
geom_bar(binwidth = 0.5)
ggplot(aes(x=mean_price), data=diamonds_mp_by_clarity )+
geom_bar(binwidth =10)
ggplot(aes(x=mean_price), data=diamonds_mp_by_clarity )+
geom_bar(binwidth =50)
ggplot(diamonds_mp_by_clarity,
aes(x=clarity , y=mean_price))+
labs(title = "Diamonds_mp_by_clarity")+
geom_bar(stat='identity')
diamonds_mp_by_color
ggplot(diamonds_mp_by_color,
aes(x=color, y=mean_price))+
labs(title="diamonds_mp_by_color")+
geom_bar(stat='identity')
p1 = ggplot(diamonds_mp_by_clarity,
aes(x=clarity , y=mean_price))+
labs(title = "Diamonds_mp_by_clarity")+
geom_bar(stat='identity')
p2 = ggplot(diamonds_mp_by_color,
aes(x=color, y=mean_price))+
labs(title="diamonds_mp_by_color")+
geom_bar(stat='identity')
library(gridExtra)
grid.arrange(p2,p1,ncol =1)
?diamonds
ggplot(aes(x=depth , y=price) , data=diamonds)+
geom_point(alpha=1/100)+
scale_x_discrete(breaks=seq(0,80,2))
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha=0.1) +
scale_x_continuous(breaks = seq(0,80,2))
ggplot(aes(x=depth , y=price) , data=diamonds)+
geom_point(alpha=1/100)+
scale_x_continuous(breaks=seq(0,80,2))
ggplot(aes(x=depth, y=price), data=diamonds) +
geom_point(alpha=1/100) +
xlim(13,90)
diamonds_by_cut <- group_by(diamonds, cut)
diamonds_mp_by_cut <- summarise(diamonds_by_cut, mean_price = mean(price))
ggplot(diamonds_mp_by_cut,
aes(x=cut , y=mean_price))+
labs(title = "Diamonds_mp_by_cut")+
geom_bar(stat='identity')
by(diamonds$price, diamonds$cut,summary)
qplot(x = price, data= diamonds , binwidth = 20)+
facet_wrap(~cut, scales="free")+
scale_x_continuous(limit=c(250,400), breaks=seq(250,400,20))
qplot(x = price, data= diamonds , binwidth = 20)+
facet_wrap(~cut, scales="free")+
scale_x_continuous(limit=c(290,350), breaks=seq(290,350,20))
qplot(x = price, data= diamonds , binwidth = 50)+
facet_wrap(~cut, scales="free")+
scale_x_continuous(limit=c(18500,19000), breaks=seq(18500,19000,50))
qplot(x = price, data= diamonds , binwidth = 50)+
facet_wrap(~cut, scales="free")+
scale_x_continuous(limit=c(18500,19000), breaks=seq(18500,19000,100))
qplot(x = price, data= diamonds , binwidth = 50)+
facet_wrap(~cut, scales="free")+
scale_x_continuous(limit=c(18600,19000), breaks=seq(18600,19000,100))
qplot(x = price, data= diamonds , binwidth = 50)+
facet_wrap(~cut, scales="free")+
scale_x_continuous(limit=c(18700,19000), breaks=seq(18700,19000,100))
qplot(x = price, data= diamonds , binwidth = 50)+
facet_wrap(~cut, scales="free")+
scale_x_continuous(limit=c(18800,19000), breaks=seq(18800,19000,100))
qplot(x = price, data= diamonds , binwidth = 50)+
facet_wrap(~cut)+
scale_x_continuous(limit=c(18800,19000), breaks=seq(18800,19000,100))
qplot(x = price, data= diamonds , binwidth = 50)+
facet_wrap(~cut)+
scale_x_continuous(limit=c(18700,19000), breaks=seq(18700,19000,100))
#Lowest priced diamonds
qplot(x = price, data= diamonds , binwidth = 20)+
facet_wrap(~cut)+
scale_x_continuous(limit=c(290,350), breaks=seq(290,350,20))
ggplot(diamonds_mp_by_cut,
aes(x=cut , y=mean_price))+
labs(title = "Diamonds_mp_by_cut")+
geom_bar(stat='identity')
qplot(x = price, data= diamonds , binwidth = 10)+
facet_wrap(~cut)+
scale_x_continuous(limit=c(290,350), breaks=seq(290,350,20))
qplot(x = price, data= diamonds , binwidth = 10)+
facet_wrap(~cut)+
scale_x_continuous(limit=c(300,400), breaks=seq(300,400,20))
qplot(x = price, data= diamonds , binwidth = 10)+
facet_wrap(~cut)+
scale_x_continuous(limit=c(320,400), breaks=seq(320,400,20))
qplot(x = price, data= diamonds , binwidth = 10)+
facet_wrap(~cut)+
scale_x_continuous(limit=c(320,1000), breaks=seq(320,1000,20))
qplot(x = price, data= diamonds , binwidth = 100)+
facet_wrap(~cut)+
scale_x_continuous(limit=c(320,1000), breaks=seq(320,1000,100))
qplot(x = price, data= diamonds , binwidth = 100)+
facet_wrap(~cut)+
scale_x_continuous(limit=c(18000,19000), breaks=seq(18000,19000,100))
by(diamonds$price, diamonds$cut,summary)
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Anu Achankunju")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
names(mtcars)
data(mtcars)
names(mtcars)
?mtcars
mtcars
str(mtcars)
dim(mtcars)
row.names(mtcars)
row.names(mtcars) <- c(1:32)
mtcars
mtcars$mpg
ggplot(aes(x=carat , y=price), data = diamonds)+
geom_pont()
library(ggplot2)
ggplot(aes(x=carat , y=price), data = diamonds)+
geom_pont()
ggplot(aes(x=carat , y=price), data = diamonds)+
geom_point()
ggplot(aes(x=carat , y=price), data = subset(diamonds,quantile(volume, 0.99))+
geom_point()
ggplot(aes(x=carat , y=price), data = diamonds)+
geom_point()
ggplot(aes(x=carat , y=price), data = diamonds)+
geom_point()
ggplot(aes(x=carat , y=price), data = diamonds)+
xlim(0,quantile(diamonds$carat, 0.99))+
ylim(0,quantile(diamonds$price, 0.99))+
geom_point()
ggplot(aes(x=carat , y=price), data = diamonds)+
xlim(0,quantile(diamonds$carat, 0.99))+
ylim(0,quantile(diamonds$price, 0.99))+
geom_point(fill = I('#F79420'), color=I('black'), shape= 21)
ggplot(aes(x=carat , y=price), data = diamonds)+
xlim(0,quantile(diamonds$carat, 0.99))+
ylim(0,quantile(diamonds$price, 0.99))+
geom_point(fill = I('#F79420'), color=I('black'), shape= 21, alpha = 1/4)+
stat_smooth(method = 'lm')
install.packages('GGally')
install.packages('scales')
install.packages("scales")
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages("MASS")
install.packages('car')
install.packages('reshape')
install.packages('plyr')
install.packages("plyr")
libabry(ggplot)
libabry(GGally)
libabry(scales)
libabry(memisc)
libabry(lattice)
libabry(MASS)
libabry(car)
libabry(reshape)
libabry(plyr)
library(ggplot)
library(GGally)
library(scales)
library(memisc)
library(lattice)
library(MASS)
library(car)
library(reshape)
library(plyr)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price),10000),]
ggpairs(diamond_samp, params = c(shape=I('.'), outlier.shape = I('.')))
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds) +
ggtitle('Price')
plot2 <- plot1+scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2 , n=1)
plot1 <- qplot(x=price, data=diamonds) + geom_histogram()+
ggtitle('Price')
plot2 <- plot1+scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2 , n=1)
plot1 <- qplot(x=price, data=diamonds, binwidth=100, fill = I('#099D09')) + geom_histogram()+
ggtitle('Price')
plot2 <- plot1+scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2 , n=1)
plot1 <- qplot(x=price, data=diamonds, binwidth=100, fill = I('#099D09')) + geom_histogram()+
ggtitle('Price')
plot2 <- <- qplot(x=price, data=diamonds, binwidth=0.01, fill = I('#F79420')) + geom_histogram()+
ggtitle('Price (log10)')+
sacle_x_log10()
grid.arrange(plot1, plot2 , n=2)
plot1 <- qplot(x=price, data=diamonds, binwidth=100, fill = I('#099D09')) + geom_histogram()+
ggtitle('Price')
plot2 <- <- qplot(x=price, data=diamonds, binwidth=0.01, fill = I('#F79420')) + geom_histogram()+
ggtitle('Price (log10)')+
scale_x_log10()
grid.arrange(plot1, plot2 , n=2)
plot1 <- qplot(x=price, data=diamonds, binwidth=100, fill = I('#099D09')) + geom_histogram()+
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds, binwidth=0.01, fill = I('#F79420')) + geom_histogram()+
ggtitle('Price (log10)')+
scale_x_log10()
grid.arrange(plot1, plot2 , n=2)
plot1 <- qplot(x=price, data=diamonds,  fill = I('#099D09')) + geom_histogram()+
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds, fill = I('#F79420')) + geom_histogram()+
ggtitle('Price (log10)')+
scale_x_log10()
grid.arrange(plot1, plot2 , n=2)
qplot(x=price, data=diamonds,  fill = I('#099D09')) + geom_histogram()+
ggtitle('Price')
qplot(x=price, data=diamonds, fill = I('#F79420')) + geom_histogram()+
ggtitle('Price (log10)')+
scale_x_log10()
plot1 <- qplot(x=price, data=diamonds,  fill = I('#099D09')) + geom_histogram()+
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds, fill = I('#F79420')) + geom_histogram()+
ggtitle('Price (log10)')+
scale_x_log10()
grid.arrange(plot1, plot2 , n=2)
library(gridExtra)
library(grid)
plot1 <- qplot(x=price, data=diamonds,  fill = I('#099D09')) + geom_histogram()+
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds, fill = I('#F79420')) + geom_histogram()+
ggtitle('Price (log10)')+
scale_x_log10()
grid.arrange(plot1, plot2 , ncol=2)
library(gridExtra)
library(grid)
plot1 <- qplot(x=price, data=diamonds,binwidth=100,  fill = I('#099D09')) + geom_histogram()+
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds,binwidth =0.01,  fill = I('#F79420')) + geom_histogram()+
ggtitle('Price (log10)')+
scale_x_log10()
grid.arrange(plot1, plot2 , ncol=2)
ggplot(aes(x=carat , y=price), data = diamonds)+
xlim(0,quantile(diamonds$carat, 0.99))+
ylim(0,quantile(diamonds$price, 0.99))+
geom_point(fill = I('#F79420'), color=I('black'), shape= 21)
qplot( carat, price, data=diamonds)+
scale_y_continuous(trans = log10_trans())+
ggtitle('Price (log10) by Carat')
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
# Use the cube root tansformation of carat
ggplot(aes(carat, price), data= diamonds)+
geom_point()+
scale_x_continuous(trans=cuberoot_trans(), limits = c(0.2,3),
breaks=c(0.2,0.5,1,2,3))+
scale_y_continuous(trans=log10_trans(), limits=(350,15000),
breaks=c(350,1000,5000,10000,15000))+
ggtitle('Price(log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
# Use the cube root tansformation of carat
ggplot(aes(carat, price), data= diamonds)+
geom_point()+
scale_x_continuous(trans=cuberoot_trans(), limits = c(0.2,3),
breaks=c(0.2,0.5,1,2,3))+
scale_y_continuous(trans=log10_trans(), limits=c(350,15000),
breaks=c(350,1000,5000,10000,15000))+
ggtitle('Price(log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha=1/2, size = 3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha=0.5, size = 0.75) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds , color = clarity) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds ) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color’)
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color’)
names(diamonds)
names(diamonds)
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
names(diamonds)
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color’)
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color’)
names(diamonds)
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = False,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color’)
names(diamonds)
names(diamonds)
names(diamonds)
names(diamonds)
names(diamonds)
data(diamonds)
names(diamonds)
data(diamonds)
data(diamonds)
names(diamonds)
data(diamonds)
names(diamonds)
library(ggplot2)
data(diamonds)
```{r}
library(ggplot2)
install.packages('ggplot2')
data(diamonds)
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
library(ggplot)
library(GGally)
library(scales)
library(memisc)
library(lattice)
library(MASS)
library(car)
library(reshape)
library(plyr)
data(diamonds)
#Load packages
library(ggplot)
library(GGally)
library(scales)
library(memisc)
library(lattice)
library(MASS)
library(car)
library(reshape)
library(plyr)
data(diamonds)
bmi <- player_df[,5]
homeruns <-player_df[,7]
min <- min(bmi);
max <- max(bmi);
# Creo i bin
Groups <- cut(x = bmi, breaks = seq(from = min, to = max, by = 2))
Groups <- data.matrix(Groups, rownames.force = NA)
# Raggruppo i dati nei bin
Bygroup = tapply(homeruns, Groups, sum)
Bygroup
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
setwd('C:\\Users\\320002667\\Box Sync\\NanoDegree\\M5_Make Effective Visualization\\MyProject\\data')
player_df<-read.csv('baseball_data.csv')
dim(player_df)
names(player_df)
summary(player_df)
str(player_df)
ggplot(aes(x=Height.cm. , y=Home.Runs), data = player_df)+
geom_point()+
xlab('Height')+
ylab('Home Runs')+
ggtitle('Home Runs Vs Height')+
geom_smooth(color = 'red', linetype=1)
ggplot(aes(x=Weight.kg. , y=Home.Runs), data = player_df)+
geom_point()+
xlab('Weight')+
ylab('Home Runs')+
ggtitle('Home Runs Vs Weight')+
geom_smooth(color = 'red', linetype=1)
ggplot(aes(x=BMI , y=Home.Runs), data = player_df)+
xlab('BMI')+
ylab('Home Runs')+
ggtitle('Home Runs Vs BMI')+
geom_point()+
geom_smooth(color = 'red', linetype=1)
bmi <- player_df[,5]
homeruns <-player_df[,7]
min <- min(bmi);
max <- max(bmi);
# Creo i bin
Groups <- cut(x = bmi, breaks = seq(from = min, to = max, by = 2))
Groups <- data.matrix(Groups, rownames.force = NA)
# Raggruppo i dati nei bin
Bygroup = tapply(homeruns, Groups, mean)
Bygroup
# Faccio il plot dei bin
barplot(height = Bygroup, xlab = "bmi", ylab = "homeruns", main="Home Runs Vs Binned BMI")
min <- min(bmi);
min
max <- max(bmi);
max
names(player_df)
setwd('C:\\Users\\320002667\\Box Sync\\NanoDegree\\M5_Make Effective Visualization\\NanoDegree_DA_P5\\data')
player_df<-read.csv('baseball_data.csv')
dim(player_df)
names(player_df)
summary(player_df)
names(player_df)
ggplot(player_df , aes(x=factor(Handedness), y=Home.Runs)) + stat_summary(fun.y="mean", geom="bar")
ggplot(player_df , aes(x=factor(Handedness), y=HomeRuns)) + stat_summary(fun.y="mean", geom="bar")
ggplot(player_df , aes(x=factor(Handedness), y=BattingAverage)) + stat_summary(fun.y="mean", geom="bar")
ggplot(player_df , aes(x=factor(Height), y=BattingAverage)) + stat_summary(fun.y="mean", geom="bar")+
facet_wrap(~Handedness)
ggplot(player_df , aes(x=factor(Height), y=BattingAverage, color=Handedness)) + stat_summary(fun.y="mean", geom="bar")
ggplot(player_df , aes(x=factor(Height), y=BattingAverage, fill=Handedness)) + stat_summary(fun.y="mean", geom="bar")
ggplot(player_df , aes(x=factor(Height), y=BattingAverage, color=Handedness)) + stat_summary(fun.y="mean", geom="bar")
